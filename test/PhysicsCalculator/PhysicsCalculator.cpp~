#include "PhysicsCalculator.hpp"
#include <btBulletDynamicsCommon.h>

btDiscreteDynamicsWorld* empty_scene(float){
}

btDiscreteDynamicsWorld* simple_scene(){
  btCollisionShape *planeShape, *sphereShape;
  planeShape = new btStaticPlaneShape(btVector3(0,1,0), 1);

  //No movement for the ground
  btDefaultMotionState* groundMotionState = new btDefaultMotionState(btTransform(btQuaternion(0,0,0,1), btVector3(0,-1,0)));
  btRigidBody::btRigidBodyConstructionInfo groundBodyCI(0, groundMotionState, planeShape, btVector3(0,0,0));
  btRigidBody* groundBody = new btRigidBody(groundBodyCI);

  w->addRigidBody(groundBody);


}


btDiscreteDynamicsWorld* init(int frame_per_second){
  btBroadphaseInterface* broadphase = new btDbvtBroadphase();
  btDefaultCollisionConfiguration* collisionConfiguration = new btDefaultCollisionConfiguration();
  btCollisionDispatcher* dispatcher = new btCollisionDispatcher(collisionConfiguration);
  btSequentialImpulseConstraintSolver* solver = new btSequentialImpulseConstraintSolver;
  btDiscreteDynamicsWorld* dynamicsWorld = new btDiscreteDynamicsWorld(dispatcher,broadphase,solver,collisionConfiguration);
  dynamicsWorld->setGravity(btVector3(0,-10,0));
}

void cleanWorld(){
  delete dynamicsWorld;
  delete solver;
  delete dispatcher;
  delete collisionConfiguration;
  delete broadphase;
}
